{"version":3,"sources":["pages/Home copy.js"],"names":["Content","clientHandler","currentUser","activeUser","history","API","useHistory","userMenu","useUserMenu","console","log","isMountedRef","useIsMountedRef","useReducer","state","newState","appIcons","loadingStatus","setState","prifinaApps","useRef","useState","installedAppIcons","setInstalledAppIcons","installedApps","setInstalledApps","notificationHandler","useEffect","a","current","listAppMarketQuery","GRAPHQL","filter","appType","gt","prifinaAppsData2","prifinaAppsJSON","data","listAppMarket","items","forEach","item","id","route","installedAppsJSON","JSON","parse","app","appProfile","initials","query","gql","getNotificationCount","variables","owner","eq","status","notificationCountResult","show","effect","hover","width","notifications","RecentApps","setClientHandler","setActiveUser","onUpdate","mutate","mutation","updateActivity","activeApp","fetchData","timeoutId","isMounted","resizeListener","clearTimeout","setTimeout","window","innerHeight","addEventListener","removeEventListener","length","appImports","map","Promise","all","then","components","appComponents","Component","i","default","displayName","component","name","iconCols","Math","ceil","gridCols","repeat","array","chunk_size","maxColHeight","Array","fill","v","isNaN","_","index","begin","slice","opacity","useSpring","from","config","duration","Fragment","onClick","div","style","interpolate","o","m","mt","zIndex","columns","flow","icons","colIndex","appIcon","pos","left","top","cursor","push","Home","props","useAppContext","userAuth","userData","initClient","setInitClient","Object","keys","getPrifinaUserQuery","prifinaID","currentPrifinaUser","getPrifinaUser","clientEndpoint","clientRegion","hasOwnProperty","updateUserProfileMutation","defaultProfileUpdate","updateUserProfile","endpoint","region","Auth","currentCredentials","c","client","AWSAppSyncClient","url","auth","type","AUTH_TYPE","AWS_IAM","credentials","disableOffline","uuid","withUsermenu"],"mappings":"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","file":"static/js/10.1d7e262b.chunk.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/no-multi-comp */\n/* global localStorage */\n\nimport React, {\n  useEffect,\n  useReducer,\n  useState,\n  useRef,\n  useLayoutEffect,\n} from \"react\";\n//import { useTheme } from \"@blend-ui/core\";\nimport { CssGrid, CssCell } from \"@blend-ui/css-grid\";\n\nimport { Box, Flex } from \"@blend-ui/core\";\n//import { ReactComponent as PrifinaLogo } from \"../assets/prifina.svg\";\n/*\nimport {\n  UserMenuContextProvider,\n  useUserMenu,\n} from \"@blend-ui/floating-user-menu\";\n*/\n//import { useUserMenu } from \"../components/FloatingUserMenu\";\n\n//import { Background } from \"../assets/background-image\";\n//import Background from \"../assets/background.png\";\n//import styled from \"styled-components\";\n//import InstalledApps from \"../components/InstalledApps\";\n//import { ReactComponent as SettingsIcon } from \"../assets/settings.svg\";\n//import AppIcon from \"../components/AppIcon\";\n//import ImportComponent from \"../components/ImportComponent\";\n//import { useIsMountedRef } from \"../lib/componentUtils\";\n\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\n\n//import AWSAppSyncClient, { createAppSyncLink } from \"aws-appsync\";\n//import { setContext } from \"apollo-link-context\";\n//import { ApolloLink } from \"apollo-link\";\n//import { createHttpLink } from \"apollo-link-http\";\n\nimport gql from \"graphql-tag\";\n/*\nimport { getNotificationCount } from \"../graphql/queries\";\n\nimport { updateActivity } from \"../graphql/mutations\";\n\nimport { newNotification } from \"../graphql/subscriptions\";\n\nimport {\n  getInstalledAppsQuery,\n  getPrifinaUserQuery,\n  updateUserProfileMutation,\n  listAppMarketQuery,\n} from \"../graphql/api\";\n*/\nimport {\n  getNotificationCount,\n  updateActivity,\n  newNotification,\n  getInstalledAppsQuery,\n  getPrifinaUserQuery,\n  updateUserProfileMutation,\n  listAppMarketQuery,\n  useIsMountedRef,\n  useAppContext,\n  useUserMenu,\n  withUsermenu,\n} from \"@prifina-apps/utils\";\n\n//import { useAppContext } from \"../lib/contextLib\";\nimport { API as GRAPHQL, Auth } from \"aws-amplify\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { StyledBox, StyledBackground } from \"../components/DefaultBackground\";\nimport { PrifinaLogo } from \"../components/PrifinaLogo\";\n\nimport { useSpring, animated } from \"react-spring\";\n\n//import withUsermenu from \"../components/UserMenu\";\n\nimport PropTypes from \"prop-types\";\n\nconst newWaiting = `subscription addWaiting($key:String!) {\n  Waiting(key: $key) {\n    createdAt\n    endpoint\n    name\n    senderKey\n  }\n}`;\n\n/*\n// HACK since this PR {@link https://github.com/awslabs/aws-mobile-appsync-sdk-js/pull/633/files} has not been accepted\n// after several months, we go ahead and modify the method to drop the graphql_headers that are causing subscription problems.\nconst {\n  AppSyncRealTimeSubscriptionHandshakeLink,\n} = require(\"aws-appsync/node_modules/aws-appsync-subscription-link/lib/realtime-subscription-handshake-link\");\nconst oldStartSubscription =\n  AppSyncRealTimeSubscriptionHandshakeLink.prototype\n    ._startSubscriptionWithAWSAppSyncRealTime;\nAppSyncRealTimeSubscriptionHandshakeLink.prototype._startSubscriptionWithAWSAppSyncRealTime = function (\n  a,\n) {\n  if (a.options) {\n    delete a.options.graphql_headers;\n  }\n  return oldStartSubscription.call(this, a);\n};\n*/\n/*\nconst importComponent = (name) => {\n  console.log(\"IMPORT \", name);\n  return React.lazy(() =>\n    import(`${name}`).catch((err) => {\n      console.log(\"ERR \", err);\n    })\n  );\n};\n*/\nconst array_chunks = (array, chunk_size) =>\n  Array(Math.ceil(array.length / chunk_size))\n    .fill()\n    .map((_, index) => index * chunk_size)\n    .map(begin => array.slice(begin, begin + chunk_size));\n\nconst Content = ({ clientHandler, currentUser, activeUser, API }) => {\n  const history = useHistory();\n  const userMenu = useUserMenu();\n  //const theme = useTheme();\n\n  //Amplify.configure(APIConfig);\n  //console.log(\"AMPLIFY \", Amplify.configure(), API.configure());\n  console.log(\"CURRENT USER \", currentUser);\n\n  const isMountedRef = useIsMountedRef();\n  const [state, setState] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    { appIcons: [], loadingStatus: true },\n  );\n\n  const prifinaApps = useRef({});\n  const [installedAppIcons, setInstalledAppIcons] = useState([]);\n  const [installedApps, setInstalledApps] = useState([]);\n  const notificationHandler = useRef(null);\n  const subscriptionHandler = useRef(null);\n\n  //const clients = useRef([]);\n  //const activeUser = useRef({});\n\n  // const [logout, setLogout] = useState(true);\n  //let installedApps = [];\n  /*\n  let installedApps = JSON.parse(localStorage.getItem(\"PrifinaInstalledApps\"));\n  if (installedApps === null) {\n    installedApps = [\n      \"Settings\",\n      \"DataConsole\",\n      \"AppMarket\",\n      \"SmartSearch\",\n      \"DisplayApp\",\n      \"ProfileCards\",\n      \"DevConsole\",\n    ];\n    localStorage.setItem(\"PrifinaInstalledApps\", JSON.stringify(installedApps));\n  }\n*/\n\n  const subscribeNotification = (userClient, variables) => {\n    console.log(\"SUBS NOTIFICATIONS:..\", variables);\n    /*\n    return userClient.hydrated().then(function (client) {\n      //Now subscribe to results\n      const observable = client.subscribe({\n        query: gql(newNotification),\n        variables: variables,\n      });\n      console.log(\"OBS \", observable);\n\n      const realtimeResults = function realtimeResults(data) {\n        console.log(\"realtime data: \", data);\n      };\n\n      observable.subscribe({\n        next: realtimeResults,\n        complete: console.log,\n        error: console.log,\n      });\n    });\n    */\n\n    return userClient\n      .subscribe({ query: gql(newNotification), variables: variables })\n      .subscribe({\n        next: res => {\n          console.log(\"NOTIFICATION SUBS RESULTS \", res);\n          if (res.data.newNotification.owner !== \"\") {\n            notificationHandler.current(1);\n          }\n        },\n        error: error => {\n          console.warn(error);\n        },\n      });\n  };\n  /*\n  const updateNotification = useCallback(handler => {\n    notificationHandler.current = handler;\n  }, []);\n*/\n  /*\n  useLayoutEffect(async () => {\n    console.log(\"SUBS NOTIFICATIONS:..\", currentUser);\n\n    subscriptionHandler.current = await subscribeNotification(clientHandler, {\n      owner: currentUser.id,\n    });\n  }, [currentUser.id]);\n*/\n  useEffect(() => {\n    async function fetchData() {\n      if (isMountedRef.current) {\n        //const prifinaAppsData = await getPrifinaAppsQuery(API, \"APPS\");\n        //console.log(\"APPS 1\", prifinaAppsData);\n        /*\n        const prifinaAppsJSON = JSON.parse(\n          prifinaAppsData.data.getPrifinaApp.apps,\n        );\n        */\n        const prifinaAppsData2 = await listAppMarketQuery(GRAPHQL, {\n          filter: { appType: { gt: 1 } }, // apps+core apps\n        });\n\n        console.log(\"APPS 2\", prifinaAppsData2);\n        let prifinaAppsJSON = {};\n        prifinaAppsData2.data.listAppMarket.items.forEach(item => {\n          prifinaAppsJSON[item.id] = item;\n          if (item.appType === 3) {\n            prifinaAppsJSON[item.id].route = \"core/\" + item.route;\n          }\n        });\n\n        console.log(prifinaApps);\n\n        const installedAppsJSON = JSON.parse(currentUser.installedApps);\n        installedAppsJSON.forEach(app => {\n          prifinaApps.current[app] = prifinaAppsJSON[app];\n        });\n\n        const appProfile = JSON.parse(currentUser.appProfile);\n        const initials = appProfile.initials;\n\n        console.log(\"APP PROFILE \", appProfile);\n        /*\n        activeUser.current = {\n          name: appProfile.name,\n          uuid: currentUser.id\n        };\n*/\n\n        const notificationCountResult = await clientHandler.query({\n          query: gql(getNotificationCount),\n          variables: {\n            filter: {\n              owner: { eq: currentUser.id },\n              status: { eq: 0 },\n            },\n          },\n        });\n        console.log(\"COUNT \", notificationCountResult);\n\n        userMenu.show({\n          initials: initials,\n          effect: { hover: { width: 42 } },\n          notifications: notificationCountResult.data.getNotificationCount,\n          RecentApps: [],\n        });\n\n        userMenu.setClientHandler(clientHandler);\n        userMenu.setActiveUser(activeUser);\n\n        notificationHandler.current = userMenu.onUpdate;\n        /*\n        subscriptionHandler.current = subscribeNotification(clientHandler, {\n          owner: currentUser.id,\n        });\n        */\n\n        await clientHandler.mutate({\n          mutation: gql(updateActivity),\n          variables: {\n            id: currentUser.id,\n            activeApp: \"Home\",\n          },\n        });\n        setInstalledApps(installedAppsJSON);\n      }\n    }\n\n    fetchData();\n\n    return () => {\n      // unsubscribe...\n      /*\n      if (subscriptionHandler.current) {\n        subscriptionHandler.unsubscribe();\n      }\n      */\n    };\n  }, [isMountedRef, currentUser.id]);\n\n  useEffect(() => {\n    // timeoutId for debounce mechanism\n    let timeoutId = null;\n    let isMounted = true;\n    const resizeListener = () => {\n      if (isMounted) {\n        // prevent execution of previous setTimeout\n        clearTimeout(timeoutId);\n        // change width from the state object after 150 milliseconds\n        timeoutId = setTimeout(() => {\n          console.log(\"RESIZE \", window.innerHeight);\n          setInstalledAppIcons([]);\n        }, 150);\n      }\n    };\n    // set resize listener\n    window.addEventListener(\"resize\", resizeListener);\n\n    // clean up function\n    return () => {\n      isMounted = false;\n      // remove resize listener\n      window.removeEventListener(\"resize\", resizeListener);\n    };\n  }, []);\n\n  //height={\"100vh\"}\n  /*\n  <StyledBox\n  minWidth={\"1440px\"}\n  maxHeight={\"792px\"}\n  minHeight={\"792px\"}\n>\n*/\n  //const installedApps=InstalledApps([\"./SettingsIcon\"])\n\n  //const Component = ImportComponent(\"./SettingsIcon\");\n  useEffect(() => {\n    if (installedApps.length > 0) {\n      const appImports = installedApps.map(app => {\n        return import(`../components/${app}Icon`);\n      });\n\n      Promise.all(appImports).then(components => {\n        console.log(\"COMPONENT \", components);\n        const appComponents = components.map((Component, i) => {\n          console.log(\"COMPONENT NAME \", Component.default.displayName);\n          return {\n            component: (\n              <div key={\"app-\" + i}>\n                <Component.default />\n              </div>\n            ),\n            name: Component.default.displayName,\n          };\n        });\n        //console.log(appComponents);\n        console.log(\"IMPORT APP ICONS...\", appComponents);\n        setState({ loadingStatus: false, appIcons: appComponents });\n      });\n    }\n    // Spread operator, wrapper function (recommended)\n    // setSearches(searches => [...searches, query])\n    // Using .concat(), wrapper function (recommended)\n    // setSearches(searches => searches.concat(query))\n  }, [installedApps]);\n\n  const { loadingStatus, appIcons } = state;\n  console.log(\"APP ICONS \", appIcons, appIcons.length * 100);\n  // window.innerHeight-130  (130 is from top)\n  const iconCols = Math.ceil(\n    (appIcons.length * 115) / (window.innerHeight - 130),\n  );\n\n  let gridCols = \"1fr\";\n  if (iconCols > 0) {\n    gridCols += \" 80px\".repeat(iconCols);\n  }\n\n  console.log(iconCols, gridCols, appIcons.length);\n\n  let maxColHeight = Array(appIcons.length)\n    .fill(0)\n    .map((v, i) => {\n      return i + 1;\n    })\n    .filter((v, i) => {\n      console.log(v, i, v * 115);\n      return v * 115 > window.innerHeight - 130;\n    })[0];\n  console.log(\"maxColHeight... \", maxColHeight - 1);\n  console.log(\"CHECK \", appIcons.length > 0, installedAppIcons.length === 0);\n  if (isNaN(maxColHeight)) maxColHeight = appIcons.length;\n  if (appIcons.length > 0 && installedAppIcons.length === 0) {\n    //console.log(\"UPDATE THIS \", appIcons);\n    setInstalledAppIcons(array_chunks(appIcons, maxColHeight - 1));\n    //console.log(installedAppIcons);\n  }\n  if (installedAppIcons.length > 0) {\n    installedAppIcons.map((v, i) => {\n      console.log(v, i);\n    });\n  }\n  console.log(\"APPS \", prifinaApps.current);\n  const { opacity } = useSpring({\n    opacity: 1,\n    from: { opacity: 0 },\n    config: { duration: 3000 },\n  });\n  // opacity.interpolate(o => (o > 0.7 ? 1 : o)),\n  //visibility: props.opacity.interpolate(o => o === 0 ? 'hidden' : 'visible')\n  // <a.div class=\"c front\" style={{ opacity, transform: transform.interpolate(t => `${t} rotateX(180deg)`) }} />\n  //style={{ opacity: opacity.interpolate(o => (o > 0.5 ? 1 : o)) }}\n  const copyInstance = obj => {\n    let copy = Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);\n    return copy;\n  };\n  return (\n    <React.Fragment>\n      {/* \n      <button\n        onClick={() => {\n          subscriptionHandler.current = subscribeNotification(clientHandler, {\n            owner: currentUser.id,\n          });\n        }}\n      >\n        SUBS...\n      </button>\n*/}\n      <button\n        onClick={() => {\n          /*\n          const APIConfig = {\n            aws_appsync_graphqlEndpoint: config.appSync.aws_appsync_graphqlEndpoint,\n            aws_appsync_region: config.main_region,\n            aws_appsync_authenticationType: config.appSync.aws_appsync_authenticationType,\n          };\n          API.configure(APIConfig);\n          */\n          /*\n          clients.current.push(GRAPHQL);\n          const _graphqlApi = copyInstance(GRAPHQL._graphqlApi);\n          clients.current.push(API);\n          clients.current[1].configure({\n            aws_appsync_graphqlEndpoint:\n              \"https://tf6xehymf5fdzkx6knahz2gyjy.appsync-api.us-east-1.amazonaws.com/graphql\",\n            aws_appsync_region: \"us-east-1\",\n            aws_appsync_authenticationType: \"AWS_IAM\",\n          });\n\n          clients.current[0]._graphqlApi = _graphqlApi;\n\n          console.log(_graphqlApi);\n\n          const subscriptionTest = clients.current[0]\n            .graphql({\n              authMode: \"AWS_IAM\",\n              query: gql(newWaiting),\n              variables: { key: \"TEST\" },\n            })\n            .subscribe({\n              next: ({ provider, value }) => console.log({ provider, value }),\n              error: error => console.warn(error),\n            });\n          console.log(\"SUBS....\", subscriptionTest);\n          */\n          /*\n          const subscriptionTest2 = clients.current[1]\n            .graphql({\n              authMode: \"AWS_IAM\",\n              query: gql(newNotification),\n              variables: { owner: \"TEST\" },\n            })\n            .subscribe({\n              next: ({ provider, value }) => console.log({ provider, value }),\n              error: error => console.warn(error),\n            });\n          console.log(\"SUBS2....\", subscriptionTest2);\n*/\n          //console.log(\"CLIENTS \", clients);\n          /*\n          export const installWidgetMutation = (API, id, widget) => {\n            return API.graphql({\n              query: installWidget,\n              variables: { id: id, widget: widget },\n              authMode: \"AMAZON_COGNITO_USER_POOLS\",\n            });\n          };\n          {\n    type: AUTH_TYPE.API_KEY,\n    apiKey: awsconfig.aws_appsync_apiKey,\n  },\n          */\n          /*\n          const testClient = new AWSAppSyncClient({\n            url:\n              \"https://reub4v4cszb53criwlma7wm7we.appsync-api.us-east-1.amazonaws.com/graphql\",\n            region: \"us-east-1\",\n            auth: {\n              \n              //type: AUTH_TYPE.AWS_IAM,\n              //credentials: () => Auth.currentCredentials(),\n              \n              type: AUTH_TYPE.API_KEY,\n              apiKey: \"da2-i7iu4pka5zbbjk4jgmgbagetr4\",\n            },\n\n            disableOffline: true,\n          });\n\n          const subscriptionTest = testClient\n            .subscribe({ query: gql(newWaiting), variables: { key: \"TEST\" } })\n            .subscribe({\n              next: res => {\n                console.log(\"NOTIFICATION SUBS RESULTS \", res);\n                if (res.data.newNotification.owner !== \"\") {\n                  notificationHandler.current(1);\n                }\n              },\n              error: error => {\n                console.warn(error);\n              },\n            });\n          console.log(\"SUBS2....\", subscriptionTest);\n*/\n          /*\n    return userClient\n    .subscribe({ query: gql(newNotification), variables: variables })\n    .subscribe({\n      next: res => {\n        console.log(\"NOTIFICATION SUBS RESULTS \", res);\n        if (res.data.newNotification.owner !== \"\") {\n          notificationHandler.current(1);\n        }\n      },\n      error: error => {\n        console.warn(error);\n      },\n    });\n    */\n          /*\n          const subscriptionTest = API.graphql({\n            authMode: \"AWS_IAM\",\n            query: gql(newWaiting),\n            variables: { key: \"TEST\" },\n          }).subscribe({\n            next: ({ provider, value }) => console.log({ provider, value }),\n            error: error => console.warn(error),\n          });\n          console.log(\"SUBS....\", subscriptionTest);\n          */\n          /*\n          // Subscribe to creation of Todo\n          const subscriptionTest = API.graphql(\n            graphqlOperation(newWaiting, { variables: { key: \"TEST\" } }),\n          ).subscribe({\n            next: ({ provider, value }) => console.log({ provider, value }),\n            error: error => console.warn(error),\n          });\n*/\n          //console.log(\"CLIENT \", client);\n          /*\n          //realtime-subscription-handshake-link.js:326 Uncaught (in promise) \n          TypeError: Cannot read properties of undefined (reading 'subscriptionFailedCallback')\n\n          _f = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _f.subscriptionFailedCallback,\n           subscriptionReadyCallback = _f.subscriptionReadyCallback;\n          // This must be done before sending the message in order to be listening immediately\n          this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                  _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n          });\n*/\n        }}\n      >\n        SUBS...\n      </button>\n\n      <StyledBox>\n        <PrifinaLogo />\n        <StyledBackground>\n          {loadingStatus && <div />}\n          {!loadingStatus && (\n            <animated.div\n              style={{ opacity: opacity.interpolate(o => (o > 0.6 ? 1 : o)) }}\n            >\n              <Box m={8} mt={77} style={{ zIndex: 3 }}>\n                <CssGrid columns={gridCols} flow=\"column\">\n                  {/* \n                <CssCell left={3} top={1}>\n                  {appIcons}\n                </CssCell>\n                */}\n                  {installedAppIcons.length > 0 &&\n                    installedAppIcons.map((icons, colIndex) => {\n                      return icons.map((appIcon, pos) => {\n                        //console.log(\"RENDER \", appIcon);\n                        return (\n                          <CssCell\n                            key={\"cell-\" + colIndex + \"-\" + pos}\n                            left={installedAppIcons.length - colIndex + 1}\n                            top={icons.length - pos}\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => {\n                              console.log(\n                                \"APP CLICK \",\n                                prifinaApps.current[appIcon.name].route,\n                              );\n                              history.push(\n                                \"/\" + prifinaApps.current[appIcon.name].route,\n                              );\n                            }}\n                          >\n                            {appIcon.component}\n                          </CssCell>\n                        );\n                      });\n                    })}\n                </CssGrid>\n              </Box>\n            </animated.div>\n          )}\n        </StyledBackground>\n      </StyledBox>\n    </React.Fragment>\n  );\n};\n\nContent.propTypes = {\n  clientHandler: PropTypes.object,\n  currentUser: PropTypes.object,\n  activeUser: PropTypes.object,\n};\n\nconst Home = props => {\n  const history = useHistory();\n  const { userAuth, currentUser } = useAppContext();\n  console.log(\"HOME \", currentUser);\n  const clientHandler = useRef(null);\n  const userData = useRef(null);\n\n  const [initClient, setInitClient] = useState(false);\n  const activeUser = useRef({});\n  /*\n  const appSyncClient = new AWSAppSyncClient({\n    url: config.amplify_config.aws_appsync_graphqlEndpoint,\n    request: async (operation) => {\n      const user = await Auth.currentUserInfo();\n      logger.debug(\"AWSAppSyncClient request:\", user);\n      operation.setContext({\n        headers: {\n          'amt-custom-username': user.username\n        }\n      });\n    },\n    region: config.amplify_config.aws_appsync_region,\n    auth: {\n      type: AUTH_TYPE.AWS_IAM,\n      credentials: () => Auth.currentCredentials(),\n    },\n  });\n*/\n  const createClient = (endpoint, region) => {\n    Auth.currentCredentials().then(c => {\n      console.log(\"HOME USER CLIENT \", c);\n    });\n\n    const client = new AWSAppSyncClient({\n      url: endpoint,\n      region: region,\n      auth: {\n        type: AUTH_TYPE.AWS_IAM,\n        credentials: () => Auth.currentCredentials(),\n      },\n\n      disableOffline: true,\n    });\n    /*\n    const AppSyncConfig = {\n      url: endpoint,\n      region: region,\n      auth: {\n        type: AUTH_TYPE.AWS_IAM,\n        credentials: () => Auth.currentCredentials(),\n      },\n\n      disableOffline: true,\n    };\n    const client = new AWSAppSyncClient(AppSyncConfig, {\n      link: new createAppSyncLink({\n        ...AppSyncConfig,\n        resultsFetcherLink: ApolloLink.from([\n          setContext((request, previousContext) => {\n            console.log(\"APOLLO \", previousContext, request);\n            return {\n              headers: {\n                ...previousContext.headers,\n                \"x-tro-organization\": \"TESTING-HEADER\",\n              },\n            };\n          }),\n          createHttpLink({\n            uri: AppSyncConfig.url,\n          }),\n        ]),\n      }),\n    });\n\n    console.log(\"USER CLIENT \", client);\n    */\n    return client;\n  };\n\n  useEffect(async () => {\n    if (Object.keys(currentUser).length > 0) {\n      const currentPrifinaUser = await getPrifinaUserQuery(\n        GRAPHQL,\n        currentUser.prifinaID,\n      );\n\n      let appProfile = JSON.parse(\n        currentPrifinaUser.data.getPrifinaUser.appProfile,\n      );\n\n      let clientEndpoint = \"\";\n      let clientRegion = \"\";\n\n      /*\n      let clientEndpoint =\n        \"https://kxsr2w4zxbb5vi5p7nbeyfzuee.appsync-api.us-east-1.amazonaws.com/graphql\";\n      let clientRegion = \"us-east-1\";\n*/\n      //updateUserProfile(id: String!, profile: AWSJSON)\n\n      if (!appProfile.hasOwnProperty(\"endpoint\")) {\n        const defaultProfileUpdate = await updateUserProfileMutation(\n          GRAPHQL,\n          currentUser.prifinaID,\n        );\n        console.log(\"PROFILE UPDATE \", defaultProfileUpdate);\n        appProfile = JSON.parse(\n          defaultProfileUpdate.data.updateUserProfile.appProfile,\n        );\n      }\n      clientEndpoint = appProfile.endpoint;\n      clientRegion = appProfile.region;\n\n      const client = createClient(clientEndpoint, clientRegion);\n\n      userData.current = currentPrifinaUser.data.getPrifinaUser;\n      //const dataConnectors = [];\n\n      activeUser.current = {\n        name: appProfile.name,\n        uuid: currentUser.prifinaID,\n        endpoint: clientEndpoint,\n        region: clientRegion,\n      };\n\n      clientHandler.current = client;\n      setInitClient(true);\n    }\n  }, [currentUser]);\n\n  return (\n    <>\n      {initClient && (\n        <Content\n          clientHandler={clientHandler.current}\n          currentUser={userData.current}\n          activeUser={activeUser.current}\n        />\n      )}\n      {!initClient && <div />}\n    </>\n  );\n};\n\nHome.displayName = \"Home\";\n\nexport default withUsermenu()(Home);\n"],"sourceRoot":""}